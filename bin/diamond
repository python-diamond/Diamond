#!/usr/bin/env python
# coding=utf-8

import os
import sys
import configobj
import socket
if os.name != 'nt':
    import pwd
    import grp
    import fcntl

try:
    from setproctitle import setproctitle
except ImportError:
    setproctitle = None

for path in [
    os.path.join('opt', 'diamond', 'lib'),
    os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))
]:
    if os.path.exists(os.path.join(path, 'diamond', '__init__.py')):
        sys.path.append(path)
        break

from diamond.server import Server
from diamond.util import get_diamond_version
from diamond.utils.log import setup_logging

import multiprocessing
import optparse
import signal


def main():
    try:
        # Initialize Options

        defaults = {
            'skip_pidfile': False,
        }

        if os.name == 'nt':
            defaults['skip_pidfile'] = True

        parser = optparse.OptionParser()

        parser.add_option("-c", "--configfile",
                          dest="configfile",
                          default="/etc/diamond/diamond.conf",
                          help="config file")

        parser.add_option("-f", "--foreground",
                          dest="foreground",
                          default=False,
                          action="store_true",
                          help="run in foreground")

        parser.add_option("-l", "--log-stdout",
                          dest="log_stdout",
                          default=False,
                          action="store_true",
                          help="log to stdout")

        parser.add_option("-p", "--pidfile",
                          dest="pidfile",
                          default=None,
                          help="pid file")

        parser.add_option("-r", "--run",
                          dest="collector",
                          default=None,
                          help="run a given collector once and exit")

        parser.add_option("-v", "--version",
                          dest="version",
                          default=False,
                          action="store_true",
                          help="display the version and exit")

        parser.add_option("--skip-pidfile",
                          dest="skip_pidfile",
                          default=defaults['skip_pidfile'],
                          action="store_true",
                          help="Skip creating PID file")

        parser.add_option("-u", "--user",
                          dest="user",
                          default=None,
                          help="Change to specified unprivilegd user")
        parser.add_option("-g", "--group",
                          dest="group",
                          default=None,
                          help="Change to specified unprivilegd group")
        parser.add_option("--skip-change-user",
                          dest="skip_change_user",
                          default=False,
                          action="store_true",
                          help="Skip changing to an unprivilegd user")

        parser.add_option("--skip-fork",
                          dest="skip_fork",
                          default=False,
                          action="store_true",
                          help="Skip forking (damonizing) process")

        # Parse Command Line Args
        (options, args) = parser.parse_args()

        # Initial variables
        uid = -1
        gid = -1

        if options.version:
            print "Diamond version %s" % (get_diamond_version())
            sys.exit(0)

        # Initialize Config
        options.configfile = os.path.abspath(options.configfile)
        if os.path.exists(options.configfile):
            config = configobj.ConfigObj(options.configfile)
        else:
            print >> sys.stderr, "ERROR: Config file: %s does not exist." % (
                options.configfile)
            parser.print_help(sys.stderr)
            sys.exit(1)

        # Initialize Logging
        log = setup_logging(options.configfile, options.log_stdout)

    # Pass the exit up stream rather then handle it as an general exception
    except SystemExit, e:
        raise SystemExit

    except Exception, e:
        import traceback
        sys.stderr.write("Unhandled exception: %s" % str(e))
        sys.stderr.write("traceback: %s" % traceback.format_exc())
        sys.exit(1)

    # Switch to using the logging system
    try:
        # PID MANAGEMENT
        if not options.skip_pidfile:
            if not options.foreground and not options.collector:
                # Initialize Pid file
                if not options.pidfile:
                    options.pidfile = str(config['server']['pid_file'])

                if os.path.isfile(options.pidfile):
                    with open(options.pidfile, "r") as old_pidfile:
                        old_pid = old_pidfile.read()

                # Write pid file
                try:
                    lockfile = open(options.pidfile, "w")

                except IOError, e:
                    log.error("Failed to write child PID file: %s" % (e))
                    sys.exit(1)

                try:
                    # Try to get an exclusive lock on the file. This will fail
                    # if another process has the file locked.
                    fcntl.flock(lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
                except IOError:
                    log.error("Unable to lock on the pidfile.")

                    with open(options.pidfile, "w") as pidfile:
                        pidfile.write(old_pid)

                    sys.exit(1)

            # Get final GIDs
            if os.name != 'nt':
                if options.group is not None:
                    gid = grp.getgrnam(options.group).gr_gid
                elif len(config['server']['group']):
                    gid = grp.getgrnam(config['server']['group']).gr_gid

            # Get final UID
            if os.name != 'nt':
                if options.user is not None:
                    uid = pwd.getpwnam(options.user).pw_uid
                elif len(config['server']['user']):
                    uid = pwd.getpwnam(config['server']['user']).pw_uid

            # Fix up pid permissions
            if not options.foreground and not options.collector:
                os.chown(options.pidfile, uid, gid)
                # Log
                log.debug("Wrote First PID file: %s" % (options.pidfile))

        # USER MANAGEMENT
        if not options.skip_change_user:
            # Switch user to specified user/group if required
            try:
                if gid != -1 and uid != -1:
                    # Manually set the groups since they aren't set by default
                    os.initgroups(pwd.getpwuid(uid).pw_name, gid)

                if gid != -1 and os.getgid() != gid:
                    # Set GID
                    os.setgid(gid)

                if uid != -1 and os.getuid() != uid:
                    # Set UID
                    os.setuid(uid)

            except Exception, e:
                print >> sys.stderr, "ERROR: Failed to set UID/GID. %s" % (e)
                sys.exit(1)

            # Log
            log.info('Changed UID: %d (%s) GID: %d (%s).' % (
                os.getuid(),
                config['server']['user'],
                os.getgid(),
                config['server']['group']))

        # DAEMONIZE MANAGEMENT
        if not options.skip_fork:
            # Detatch Process
            if not options.foreground and not options.collector:
                if hasattr(signal, 'SIGHUP'):
                    signal.signal(signal.SIGHUP, signal.SIG_IGN)

                # Double fork to serverize process
                log.info('Detaching Process.')
                l_read, l_write = socket.socketpair()

                # Fork 1
                try:
                    pid = os.fork()
                    if pid > 0:
                        l_write.close()
                        l_status = l_read.recv(1)

                        # Exit first paren
                        if l_status == "r":
                            sys.exit(0)

                        else:
                            sys.exit(1)

                except OSError, e:
                    print >> sys.stderr, "Failed to fork process." % (e)
                    sys.exit(1)

                l_read.close()

                # Decouple from parent environmen
                os.setsid()
                os.umask(0o022)
                # Fork 2
                try:
                    pid = os.fork()
                    if pid > 0:
                        # Exit second paren
                        sys.exit(0)
                except OSError, e:
                    print >> sys.stderr, "Failed to fork process." % (e)
                    sys.exit(1)
                # Close file descriptors so that we can detach
                sys.stdout.close()
                sys.stderr.close()
                sys.stdin.close()
                os.close(0)
                os.close(1)
                os.close(2)
                sys.stdout = open(os.devnull, 'w')
                sys.stderr = open(os.devnull, 'w')

        # PID MANAGEMENT
        if not options.skip_pidfile:
            # Finish Initialize PID file
            if not options.foreground and not options.collector:

                try:
                    lockfile.write("%s" % (os.getpid()))
                    lockfile.flush()

                except IOError:
                    log.error("Unable to write pid to the pidfile.")
                    sys.exit(1)

                # Log
                log.debug("Wrote child PID file: %s" % (options.pidfile))

        # Initialize Server
        server = Server(configfile=options.configfile)

        def sigint_handler(signum, frame):
            log.info("Signal Received: %d" % (signum))
            server.running = False

        # Set the signal handlers
        signal.signal(signal.SIGINT, sigint_handler)
        signal.signal(signal.SIGTERM, sigint_handler)

        if not options.skip_fork:
            def __onInitDone():
                l_write.sendall("r")
                l_write.close()

            server.run(__onInitDone)

        else:
            server.run()

        for child in multiprocessing.active_children():
            log.info(child.name)

            while child.is_alive():
                child.terminate()
                child.join(0.1)

        # Delete Pidfile
        if not options.skip_pidfile and (not options.pidfile is None) and os.path.exists(options.pidfile):
            os.remove(options.pidfile)
            # Log
            log.debug("Removed PID file: %s" % (options.pidfile))

        sys.exit(0)

    # Pass the exit up stream rather then handle it as an general exception
    except SystemExit, e:
        raise SystemExit

    except Exception, e:
        import traceback
        log.error("Unhandled exception: %s" % str(e))
        log.error("traceback: %s" % traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    if setproctitle:
        setproctitle(os.path.basename(__file__))
    main()
